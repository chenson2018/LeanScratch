import Mathlib.Order.OmegaCompletePartialOrder
import Mathlib.Order.CompletePartialOrder
import LeanScratch.PCF.FlatCPO

open OmegaCompletePartialOrder Function

-- TODO: propogate this to the interpretations of types/contexts...
-- or consider Mathlib.Control.LawfulFix again? (I doubt it, but leving this comment anyway)
theorem cpo_fix {Œ±} [cpo : CompletePartialOrder Œ±] [OrderBot Œ±] (f : Œ± ‚ÜíùíÑ Œ±) : 
  f (‚®Ü (n : ‚Ñï), f^[n] ‚ä•) = ‚®Ü (n : ‚Ñï), f^[n] ‚ä• := fixedPoints.œâSup_iterate_mem_fixedPoint f ‚ä• (OrderBot.bot_le (f ‚ä•))

-- if a function maintains ‚ä•, it is monotone
theorem map_bot_mono {Œ±} (f : WithBot Œ± ‚Üí WithBot Œ±) (h : f ‚ä• = ‚ä•) : Monotone f := by
  intros a b le
  cases a <;> cases le <;> aesop

def lift {Œ±} (f : Œ± ‚Üí Œ±) : WithBot Œ± ‚Üí WithBot Œ± 
| ‚ä• => ‚ä• 
| some a => some (f a)

theorem lift_mono {Œ±} (f : Œ± ‚Üí Œ±) : Monotone (lift f) := map_bot_mono (lift f) rfl

theorem lift_left_inverse {Œ±} {f g : Œ± ‚Üí Œ±} : LeftInverse f g ‚Üí LeftInverse (lift f) (lift g) := by
  simp [LeftInverse]
  intros inv a
  induction a <;> simp [lift]
  aesop

theorem succ_pred_inv : LeftInverse (¬∑ - 1) (¬∑ + 1) := by simp [LeftInverse]

def bot_s := lift (¬∑ + 1)
def bot_p := lift (¬∑ - 1)

theorem bot_s_p : bot_p ‚àò bot_s = id := by
  have inv := lift_left_inverse succ_pred_inv
  aesop

-- TODO: I think needed for œâSup
theorem mono_ext {Œ±} {c : Chain (WithBot Œ±)} (mono : WithBot Œ± ‚Üío WithBot Œ±) 
  : (‚àÉ a : Œ±, ‚Üëa ‚àà c) ‚Üî (‚àÉ a : Œ±, ‚Üëa ‚àà c.map mono) := sorry

theorem œâSup_bot {Œ±} {c : Chain (WithBot Œ±)} (f : WithBot Œ± ‚Üío WithBot Œ±) : œâSup c = ‚ä• ‚Üí œâSup (c.map f) = ‚ä• := by
  simp only [œâSup]
  intros h
  simp only [dite_eq_right_iff] at h
  split
  case isTrue h' =>
    obtain ‚ü®a_im, mem‚ü© := h'
    exfalso
    refine WithBot.coe_ne_bot (h ?_)
    sorry
  case isFalse => rfl

theorem œâSup_coe {Œ±} {c : Chain (WithBot Œ±)} (f : WithBot Œ± ‚Üío WithBot Œ±) {a : Œ±} : œâSup c = ‚Üëa ‚Üí œâSup (c.map f) = f ‚Üëa := 
  sorry

noncomputable def bot_s_hom : WithBot ‚Ñï  ‚ÜíùíÑ WithBot ‚Ñï where
  toFun := bot_s
  monotone' := lift_mono (¬∑ + 1)
  map_œâSup' c := sorry

noncomputable def bot_p_hom : WithBot ‚Ñï  ‚ÜíùíÑ WithBot ‚Ñï where
  toFun := bot_p
  monotone' := lift_mono (¬∑ - 1)
  map_œâSup' c := sorry

def bot_cond : (WithBot ‚Ñï √ó WithBot ‚Ñï √ó WithBot ‚Ñï) ‚Üí WithBot ‚Ñï
| (‚ä•,_,_) => ‚ä•
| (0,ret,_) => ret
| (some (_ + 1),_,ret) => ret

theorem bot_cond_mono : Monotone bot_cond := by
  intros p‚ÇÅ p‚ÇÇ le
  obtain ‚ü®c‚ÇÅ, i‚ÇÅ, e‚ÇÅ‚ü© := p‚ÇÅ
  obtain ‚ü®c‚ÇÇ, i‚ÇÇ, e‚ÇÇ‚ü© := p‚ÇÇ 
  simp [bot_cond]
  cases le
  next le_c le =>
    cases le
    next le_i le_e =>
      simp_all
      cases le_c
      case inl => simp_all
      case inr eq‚ÇÅ =>
        subst eq‚ÇÅ
        induction c‚ÇÅ
        case bot => simp
        case coe n =>
          cases n <;> simp <;> assumption

noncomputable def bot_cond_hom : (WithBot ‚Ñï √ó WithBot ‚Ñï √ó WithBot ‚Ñï) ‚ÜíùíÑ WithBot ‚Ñï where
  toFun := bot_cond
  monotone' := bot_cond_mono
  map_œâSup' c := sorry
